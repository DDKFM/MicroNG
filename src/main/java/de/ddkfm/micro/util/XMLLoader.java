package de.ddkfm.micro.util;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.json.JSONObject;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import javax.xml.XMLConstants;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.validation.Schema;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Validator;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * The XMlLoader class check a given XMl-Document( as URL) for a right XML Schema and generate a list of LogicValueRepresentation's
 * */
public class XMLLoader {
	private static Logger logger = LogManager.getLogger("XMLLoader");
	private List<LogicValueRepresentation> elementData = new ArrayList<LogicValueRepresentation>();
	/**
	 * Constructor for the class, which load the ElementData by a given URL, which should be a XMl document
	 * */
	public XMLLoader(URL xmlURL) {
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		try {
			DocumentBuilder builder = factory.newDocumentBuilder();
			Document doc = builder.parse(xmlURL.toExternalForm());
			
			//Valididit�tspr�fung
			SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
			URL schemaFile = ClassLoader.getSystemResource("de/ddkfm/util/xml/AttributesSchema.xsd");
			Schema schema = schemaFactory.newSchema(schemaFile);
			
			Validator validator = schema.newValidator();
			try {
				validator.validate(new DOMSource(doc));
			} catch (Exception e) {
				logger.error("Fehler beim Validieren der XML-Datei. Sie entspricht nicht den Anforderungen: " + e.getMessage());
				throw e;
			}
			
			Element root = doc.getDocumentElement();
			NodeList logicValues = root.getElementsByTagName("LogicValue");
			for(int i = 0 ; i < logicValues.getLength() ; i++){
				Node childNode = logicValues.item(i);
				LogicValueRepresentation repres = new LogicValueRepresentation(childNode);
				elementData.add(repres);
			}
		} catch (Exception e) {
			logger.error("Fehler beim Lesen der XML-Datei: ",e);
		}
	}
	public XMLLoader(JSONObject obj) {
		this.elementData = obj.toMap().entrySet()
				.stream()
				.map(entry -> {
					Map<String, Object> value = (HashMap) entry.getValue();
					LogicValueRepresentation lv = new LogicValueRepresentation();
					lv.setName(entry.getKey());
					lv.setType((String) value.get("type"));
					Map<String, Map<String, String>> connections = new HashMap<>();
					for(Object conn : (List<Object>) value.get("connections")) {
						Map<String, Object> connection = (Map<String, Object>) conn;
						Map<String, String> connMap = new HashMap<>();
						for(String key : connection.keySet())
							connMap.put(key, connection.get(key).toString());
						connections.put((String) connection.get("name"), connMap);
					}
					lv.setConnections(connections);
					List<Map<String, String>> layout = new ArrayList<>();
					for(Object p : (List<Object>) value.get("layout")) {
						Map<String, Object> point = (Map<String, Object>) p;
						Map<String, String> coordinate = new HashMap<>();
						coordinate.put("x", point.get("x").toString());
						coordinate.put("y", point.get("y").toString());
						layout.add(coordinate);
					}
					lv.setPoints(layout);
					return lv;
				})
				.collect(Collectors.toList());
	}
	/**
	 * getXMLElements returns a list of LogicValueRepresentation's which are generated by a given XML-Document
	 * @return list of LogicValueRepresentation
	 * */
	public List<LogicValueRepresentation> getXMLElements(){
		return elementData;
	}
}
